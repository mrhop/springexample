group 'com.hopever'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'maven'
sourceCompatibility = 1.8

jar{
    manifest{
        attributes 'Implementation-Title': 'Gradle Quickstart',
                'Implementation-Version': '1.0'}
}
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE'
        classpath 'org.jooq:jooq-codegen:3.7.2'
        classpath 'org.jooq:jooq-meta:3.7.2'
        classpath 'com.h2database:h2:1.4.190'
    }
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'spring-boot'

bootRun {
    addResources = true
}
repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'io.spring.platform:platform-bom:2.0.1.RELEASE'
    }
}
dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-redis'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.springframework.boot:spring-boot-starter-data-solr'
    compile 'org.jooq:jooq:3.7.2'
    runtime 'com.h2database:h2'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    compile ('org.springframework.boot:spring-boot-configuration-processor') {ext.optional = true}
    compile 'org.springframework.integration:spring-integration-xml'
}
compileJava.dependsOn(processResources)




//jooq

// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
    jdbc() {
        driver('org.h2.Driver')
        url('jdbc:h2:file:./data/test_h2')
        user('sa')
        password('')
        schema('TEST_SCHEMA')
    }
    generator() {
        database() {
            name 'org.jooq.util.h2.H2Database'
        }

        // Watch out for this caveat when using MarkupBuilder with "reserved names"
        // - https://github.com/jOOQ/jOOQ/issues/4797
        // - http://stackoverflow.com/a/11389034/521799
        // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
        generate([:]) {
            pojos true
            daos true
            records true
            jpaAnnotations true
        }
        target() {
            packageName('com.hopever.springexample.db.jooq')
            directory('src/main/java')
        }
    }
}

// Run the code generator
// ----------------------
org.jooq.util.GenerationTool.generate(
        javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
)