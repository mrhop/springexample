group 'com.hopever'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'maven'
sourceCompatibility = 1.8

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                'Implementation-Version': '1.0'
    }
}
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE'
        classpath 'org.jooq:jooq-codegen:3.7.2'
        classpath 'org.jooq:jooq-meta:3.7.2'
        classpath 'com.h2database:h2:1.4.190'
        classpath 'mysql:mysql-connector-java:5.1.38'
    }
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'spring-boot'

bootRun {
    addResources = true
}
repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'io.spring.platform:platform-bom:2.0.1.RELEASE'
    }
}
dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    //compile 'org.springframework.boot:spring-boot-starter-redis'
    //compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    //compile 'org.springframework.boot:spring-boot-starter-integration'
    //compile 'org.springframework.boot:spring-boot-starter-data-solr'
    //compile 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    //compile 'org.elasticsearch:elasticsearch:2.2.0'
    compile 'org.jooq:jooq:3.7.2'
    runtime 'com.h2database:h2'
    compile 'mysql:mysql-connector-java'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    compile('org.springframework.boot:spring-boot-configuration-processor') { ext.optional = true }
    compile 'org.springframework.integration:spring-integration-xml'
    //cache
    compile 'org.springframework.boot:spring-boot-starter-cache'
    compile 'javax.cache:cache-api'
    //compile 'net.sf.ehcache:ehcache'
    //ehcache jcache
    //compile 'org.ehcache:jcache:1.0.1'
    //compile "com.hazelcast:hazelcast"
    //compile "org.infinispan:infinispan-core"
    //compile "org.infinispan:infinispan-jcache"
    //compile "org.infinispan:infinispan-spring4"
    //compile "com.google.guava:guava"
    //jms
    //active-mq
//    compile 'org.springframework:spring-jms'
//    compile 'org.apache.activemq:activemq-broker'
//    compile 'org.apache.activemq:activemq-pool'
    //Artemis
    //compile 'org.springframework.boot:spring-boot-starter-artemis'
    //AMQP
    //compile 'org.springframework.boot:spring-boot-starter-amqp'
    //AMQP rabbit
//    compile 'org.springframework.amqp:spring-rabbit'
    //Email
    //compile 'org.springframework.boot:spring-boot-starter-mail'
    //JTA
    //JTA with Atomikos
    compile 'org.springframework.boot:spring-boot-starter-jta-atomikos'
}
compileJava.dependsOn(processResources)

//jooq

// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------

// Run the code generator
// ----------------------
task generatePojoH2 << {
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
        jdbc() {
            driver('org.h2.Driver')
            url('jdbc:h2:file:./data/test_h2')
            user('sa')
            password('')
            schema('TEST_SCHEMA')
        }
        generator() {
            database() {
                name 'org.jooq.util.h2.H2Database'
            }

            // Watch out for this caveat when using MarkupBuilder with "reserved names"
            // - https://github.com/jOOQ/jOOQ/issues/4797
            // - http://stackoverflow.com/a/11389034/521799
            // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
            generate([:]) {
                pojos true
                daos true
                records true
                jpaAnnotations true
            }
            target() {
                packageName('com.hopever.springexample.db.jooq.h2')
                directory('src/main/java')
            }
        }
    }
    org.jooq.util.GenerationTool.generate(
            javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
    )
}

task generatePojoMysql << {
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
        jdbc() {
            driver('com.mysql.jdbc.Driver')
            url('jdbc:mysql://localhost/test')
            user('root')
            password('root')
            schema('test')
        }
        generator() {
            database() {
                name 'org.jooq.util.mysql.MySQLDatabase'
            }
            // Watch out for this caveat when using MarkupBuilder with "reserved names"
            // - https://github.com/jOOQ/jOOQ/issues/4797
            // - http://stackoverflow.com/a/11389034/521799
            // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
            generate([:]) {
                pojos true
                daos true
                records true
                jpaAnnotations true
            }
            target() {
                packageName('com.hopever.springexample.db.jooq.mysql')
                directory('src/main/java')
            }
        }
    }
    org.jooq.util.GenerationTool.generate(
            javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
    )
}
