/**
 * This class is generated by jOOQ
 */
package com.hopever.springexample.db.jooq.h2.tables;


import com.hopever.springexample.db.jooq.h2.Keys;
import com.hopever.springexample.db.jooq.h2.TestSchema;
import com.hopever.springexample.db.jooq.h2.tables.records.TestRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Test extends TableImpl<TestRecord> {

	private static final long serialVersionUID = 1394037701;

	/**
	 * The reference instance of <code>TEST_SCHEMA.TEST</code>
	 */
	public static final Test TEST = new Test();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TestRecord> getRecordType() {
		return TestRecord.class;
	}

	/**
	 * The column <code>TEST_SCHEMA.TEST.ID</code>.
	 */
	public final TableField<TestRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>TEST_SCHEMA.TEST.NAME</code>.
	 */
	public final TableField<TestRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * Create a <code>TEST_SCHEMA.TEST</code> table reference
	 */
	public Test() {
		this("TEST", null);
	}

	/**
	 * Create an aliased <code>TEST_SCHEMA.TEST</code> table reference
	 */
	public Test(String alias) {
		this(alias, TEST);
	}

	private Test(String alias, Table<TestRecord> aliased) {
		this(alias, aliased, null);
	}

	private Test(String alias, Table<TestRecord> aliased, Field<?>[] parameters) {
		super(alias, TestSchema.TEST_SCHEMA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<TestRecord, Long> getIdentity() {
		return Keys.IDENTITY_TEST;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TestRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_2;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TestRecord>> getKeys() {
		return Arrays.<UniqueKey<TestRecord>>asList(Keys.CONSTRAINT_2);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Test as(String alias) {
		return new Test(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Test rename(String name) {
		return new Test(name, null);
	}
}
